#  Task320. Слой хранения (JPA)

### Дано: 
- Разрабатываемая система обрабатывает сущности **{{Author}}**, **{{News}}**, **{{Tag}}** и **{{Comment}}**, которые логически связаны отношениями 
  - один-ко-многим (**{{Author}}** и **{{News}}**, **{{News}}** и **{{Comment}}**) 
  - многие-ко-многим (**{{News}}**, **{{Tag}}**). 
- Необходимо реализовать хранение сущностей в реляционной базе данных **Postgres**, с учетом перспективы развития приложения.
 
### Задание

Основой для задания является следующая схема приложения

**Внимание, префикс таблиц не указан, но обязательно должен быть в решении**

![Entities-app](media/320.svg)

![designations](../common/svg/uml.svg)

- Модель данных:
  - Используются сущности из предыдущей работы, указанные на схеме 
    - **{{Author}}**
    - **{{News}}**
    - **{{Tag}}**
    - **{{Comment}}**
    - при необходимости можно использовать общую абстракцию для сущностей
- Слой хранения:
  - Составьте сценарий инициализации базы данных, рекомендуется использовать **liquibase** в формате XML
  - Проверьте создание таблиц **tbl_{{author}}**, **tbl_{{news}}**, **tbl_{{tag}}** и **tbl_{{comment}}**.
  - Доработайте обобщенный интерфейс для хранения и поиска данных сущностей для **CRUD** операций:
      - операции поиска и выборки должны поддерживать пагинацию, фильтрацию и сортировку
  - Протестируйте разработанный интерфейс для сущностей **{{Author}}**, **{{News}}**, **{{Tag}}** и **{{Comment}}**.

### Технические требования

  - **ВАЖНО!** Используйте префикс **/api/v1.0/** для контроллеров REST и их методов,
  - **ВАЖНО!** Используйте адрес и порт **localhost:24110** для самого приложения.
  - **ВАЖНО!** Используйте следующие данные при подключении к **Postgresql**
    - Префикс драйвера **jdbc:postgresql:**
    - Адрес базы данных **localhost**
    - Порт базы данных **5432**
    - user **postgres**
    - password **postgres**
    - Схема **distcomp**
  - **ВАЖНО!** Используйте обязательный префикс **tbl_** для таблиц в базе данных

### Рекомендации

#### Возможные решения

- В качестве языка программирования для backend лучше всего использовать язык Java с его экосистемой (Maven, Spring, Mapstruct и т.д.)
- Используйте Spring Boot starter: `org.springframework.boot:spring-boot-starter-data-jpa` для реализации функций [JPA] - это наиболее простой путь решения.
- По согласованию с руководителем/ментором/тренером/лектором/преподавателем курса можно использовать другие языки программирования (не рекомендуется).

#### Ожидаемые операции

См. предыдущую задачу 310 REST

#### Валидация

Все входные параметры (запросы) должны проверяться непосредственно в коде бизнес-логики с помощью специальной проверки или функций используемого фреймворка.
>Примечание. Для поддержки ваших пользовательских аннотаций и выполнения проверки вне кода бизнес-логики вы можете использовать специализированные решения,
>например: [Aspects](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop).

#### Тестирование

- [x] Добавьте Unit-тесты на новую функциональность (рекомендуется использовать **TestContainers**)
- [x] Дополните слой контроллера СВОИМИ тестами JUnit, используя, например: [RestAssured Framework](https://semaphoreci.com/community/tutorials/testing-rest-endpoints-using-rest-assured).
- [x] Выполните тестирование контроллеров REST для объектов **{{Author}}**, **{{News}}**, **{{Tag}}** и **{{Comment}}**.
- Контроллеры REST должны поддерживать операции [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) для вышеупомянутых объектов, т.е. должны реализовать такой функционал:
  - [x] Поддержка поиска **{{Author}}**, **{{News}}**, **{{Tag}}** и **{{Comment}}** по ключевому полю **{{id}}**.
  - [x] Поддержка создания сущностей **{{Author}}**, **{{News}}**, **{{Tag}}** и **{{Comment}}**.
  - [x] Поддержка изменения **{{Author}}**, **{{News}}**, **{{Tag}}** и **{{Comment}}**.
  - [x] Поддержка удаления **{{Author}}**, **{{News}}**, **{{Tag}}** и **{{Comment}}** по ключевому полю **{{id}}**.

#### Обязательные требования:

1. Код должен быть чистым и не должен содержать никаких конструкций, предназначенных исключительно для разработчиков.
2. Приложение должно быть спроектировано и написано с учетом принципов ООП, SOLID и лучших практик проектирования REST.
3. Должна использоваться четкая многоуровневая структура с определением обязанностей каждого прикладного уровня.
4. Вся бизнес-логика должна быть написана в сервисах: отображение `model` в `dto` и наоборот, валидация и т.д.
5. Модуль-web должен принимать и возвращать объекты передачи данных dto.
6. Методы контроллера, возвращающие коллекцию dto, должны будут поддерживать нумерацию страниц и сортировку в будущих версиях.
7. Контроллеры и их методы должны поддерживать управление версиями.
8. Должна быть реализована удобная обработка ошибок: все ошибки должны быть осмысленными и понятными. 
9. Ошибки должны содержать `errorMessage` и `errorCode`, где `errorCode` — ваш пятизначный код, в котором первые три цифры код совпадают с кодом ответа в заголовке HTTP а две оставшиеся имеют произвольные значения, но логически связанны с errorMessage.
10. Приложение должно быть протестировано и пройти все наборы тестов.

#### Рекомендации к приложению:

1. JDK 21 - ожидаемая среда выполнения.
2. Maven. Пока архитектура произвольная, но в итоге мы получим многомодульный проект на базе Spring Boot.
3. Язык программирования: Java
