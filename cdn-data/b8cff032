# NoSQL Cluster Cassandra

# Теория

[NoSQL](https://ru.wikipedia.org/wiki/NoSQL)

[Apache Cassandra](https://ru.wikipedia.org/wiki/Apache_Cassandra)

# **Как начать работать с Cassandra**

Cassandra — это распределенная база данных NoSQL. По своей структуре базы данных NoSQL являются легковесными, с открытым исходным кодом, нереляционными и широко распределенными. К их сильным сторонам относятся горизонтальная масштабируемость, распределенная архитектура и гибкий подход к определению схемы.

Базы данных NoSQL обеспечивают быструю, специализированную организацию и анализ очень больших объемов разрозненных типов данных. Это стало еще более важным в последние годы с появлением больших данных и необходимостью быстрого масштабирования баз данных в облаке. Cassandra — это одна из баз данных NoSQL, которые устраняют ограничения предыдущих технологий управления данными, таких как базы данных SQL.

# **Распределение обеспечивает мощность и стабильность**

![https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-01.jpg](https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-01.jpg)

Одним из важных атрибутов Cassandra является то, что ее базы данных являются распределенными. Это дает как технические, так и коммерческие преимущества. Базы данных Cassandra легко масштабируются, когда приложение находится под высокой нагрузкой, а дистрибутив также предотвращает потерю данных из-за сбоя оборудования в любом конкретном центре обработки данных. Распределенная архитектура также обеспечивает техническую мощность; Например, разработчик может настроить пропускную способность запросов на чтение или отдельных запросов на запись.

«Распределенный» означает, что Cassandra может работать на нескольких машинах, представляя пользователям одну сущность. Нет особого смысла запускать Cassandra как один узел, хотя это очень полезно, чтобы помочь вам быстрее понять, как он работает, чтобы получить максимальную отдачу от Cassandra, вы должны запускать его на нескольких машинах.

Поскольку Cassandra является распределенной базой данных, она может иметь (и обычно имеет) несколько узлов. Узел — это отдельный экземпляр Cassandra. Эти узлы взаимодействуют друг с другом через протокол, который представляет собой процесс компьютерного однорангового взаимодействия. Cassandra также имеет особую архитектуру – любой узел в базе данных может предоставлять тот же функционал, что и любой другой узел, что способствует надежности и отказоустойчивости Cassandra. Несколько узлов могут быть логически организованы в кластер или «кольцо». Вы также можете иметь несколько центров обработки данных.

# **Хотите больше мощности? Добавление дополнительных узлов**

![https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-02.jpg](https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-02.jpg)

Одна из причин популярности Cassandra заключается в том, что она позволяет разработчикам динамически масштабировать свои базы данных, используя готовое оборудование, без простоев. Вы можете расширять, когда вам это нужно, а также уменьшать, если требования приложения предполагают этот путь.

Возможно, вы привыкли к базам данных Oracle или MySQL. Если это так, то вы знаете, что их расширение для поддержки большего числа пользователей или емкости хранилища требует увеличения мощности процессора, оперативной памяти или более быстрых дисков. Каждый из них стоит немалых денег. И все же: в итоге вы все равно столкнетесь с некоторыми ограничениями.

В отличие от этого, Cassandra позволяет легко увеличить объем данных, которыми она может управлять. Поскольку Cassandra работает на основе узлов, она масштабируется горизонтально (так называемое горизонтальное масштабирование) с использованием более дешевого оборудования. Чтобы удвоить емкость или удвоить пропускную способность, увеличьте количество узлов в два раза.

Вот и все. Нужно больше мощности? Добавляйте больше узлов — будь то еще 8 или 8 000 — без простоев. При желании у вас также есть возможность уменьшить масштаб.

Эта линейная масштабируемость применяется практически бесконечно и стала одним из ключевых преимуществ Cassandra.

# Внедрение масштабируемости

![diagrams-03.jpg](media/330-01.png)

В Cassandra сами данные распространяются автоматически, что приводит к (положительным) последствиям для производительности. Это достигается с помощью разделов. Каждый узел владеет определенным набором маркеров, а Cassandra распределяет данные на основе диапазонов этих маркеров по кластеру. Ключ секции отвечает за распределение данных по узлам и важен для определения местоположения данных. Когда данные вставляются в кластер. Первым шагом является применение хеш-функции к ключу секции. Выходные данные используются для определения того, получит ли тот или иной узел (на основе диапазона маркеров) данные.

![https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-04.jpg](https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-04.jpg)

Когда данные поступают, координатор базы данных берет на себя работу по их назначению данному разделу — назовем его разделом 59. Помните, что любой узел в кластере может взять на себя роль координатора. Как мы уже упоминали ранее, узлы взаимодействуют друг с другом; во время которого они сообщают, какой узел отвечает за какие диапазоны. Итак, в нашем примере координатор выполняет поиск: у какого узла есть токен 59? Когда он находит нужный, он пересылает эти данные на этот узел. Узел, которому принадлежат данные для этого диапазона, называется узлом-репликой. Один фрагмент данных может быть реплицирован на несколько узлов (реплик), что обеспечивает надежность и отказоустойчивость. До сих пор наши данные были реплицированы только в одну реплику. Это представляет собой коэффициент репликации, равный единице, или RF = 1.

Узел-координатор не является одним местоположением; Если бы это было так, система была бы хрупкой. Это просто узел, который получает запрос в данный конкретный момент. Любой узел может выступать в качестве координатора.

# **Репликация обеспечивает надежность и отказоустойчивость**

![diagrams-05.jpg](http://localhost:24100/media/330-02.png)

Один фрагмент данных может быть реплицирован между несколькими узлами (репликами), что обеспечивает надежность и отказоустойчивость. Cassandra поддерживает концепцию коэффициента репликации (RF), который описывает, сколько копий данных должно существовать в базе данных. До сих пор наши данные были реплицированы только в одну реплику (RF = 1). Если мы увеличим это значение до коэффициента репликации, равного двум (RF = 2), данные также должны храниться на второй реплике, и поэтому каждый узел становится ответственным за вторичный диапазон токенов в дополнение к своему основному диапазону. Коэффициент репликации, равный трем, гарантирует, что существует три узла (реплики), охватывающих этот конкретный диапазон маркеров, а данные хранятся еще на одном.

![https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-06.jpg](https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-06.jpg)

Распределенный характер Cassandra делает ее более отказоустойчивой и производительной. Это действительно важно, когда у нас есть несколько реплик одних и тех же данных. Это помогает системе самовосстановиться, если что-то пойдет не так, например, узел выйдет из строя, выйдет из строя жесткий диск или AWS перезагрузит инстанс. Репликация гарантирует, что данные не будут потеряны. Если поступает запрос на данные, даже если одна из наших реплик не работает, две другие все еще доступны для выполнения запроса. Координатор также хранит «подсказку» для этих данных, и когда упавшая реплика вернется обратно, она обнаружит, что она пропустила, и догонит две другие реплики. Никаких ручных действий не требуется, это делается полностью автоматически.

![apache-cassandra-diagrams-07.jpg](http://localhost:24100/media/330-03.png)

Использование нескольких реплик также дает преимущества в производительности. Поскольку мы не ограничены одним экземпляром, у нас есть три узла (реплики), к которым можно получить доступ для предоставления данных для наших операций и между которыми мы можем распределить нагрузку для достижения наилучшей производительности.

Cassandra автоматически реплицирует эти данные между центрами обработки данных. Ваше приложение может записывать данные на узел Cassandra на западном побережье США, и эти данные будут автоматически доступны в центрах обработки данных на узлах в Азии и Европе. Это дает положительные преимущества в производительности, особенно если вы поддерживаете базу пользователей по всему миру. В мире, зависящем от облачных вычислений и быстрого доступа к данным, ни один пользователь не страдает от задержек из-за расстояния.

# **Настройка консистенции**

![https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-08.jpg](https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-08.jpg)

Мы много говорили о распределенных системах и доступности. Если вы знакомы с теоремой CAP, Cassandra по умолчанию является базой данных AP (Available Partition-tolerant), поэтому она «всегда включена». Но на самом деле вы можете настроить согласованность для каждого запроса. В этом контексте уровень согласованности — это минимальное количество узлов Cassandra, которые должны подтвердить операцию чтения или записи координатору, прежде чем операция будет считаться успешной. Как правило, уровень согласованности (CL) выбирается на основе коэффициента репликации.

![diagrams-09.jpg](http://localhost:24100/media/330-04.png)

В приведенном ниже примере наши данные реплицируются по трем узлам. У нас есть CL=QUORUM (кворум относится к большинству, 2 репликам в данном случае или RF/2 +1), поэтому координатору потребуется получить подтверждение от двух реплик, чтобы запрос был признан успешным.

Как и в случае с другими вычислительными задачами, может потребоваться некоторый навык, чтобы научиться настраивать эту функцию для идеальной производительности, доступности и целостности данных, но тот факт, что вы можете управлять ею на таком детальном уровне, означает, что вы можете контролировать развертывание до мельчайших деталей.

![https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-10.jpg](https://cassandra.apache.org/_/_images/diagrams/apache-cassandra-diagrams-10.jpg)

В конечном счете, Cassandra не зависит от развертывания. Не имеет значения, где вы размещаете его — на сервере, на облачном провайдере, на нескольких облачных провайдерах. Вы можете использовать их комбинацию для создания одной базы данных. Это дает разработчикам программного обеспечения максимальную гибкость.

