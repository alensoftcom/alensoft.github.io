# Task350. Кеширование данных (на примере **Redis**)

### Дано:

- Разрабатываемая система обрабатывает сущности **{{Author}}**, **{{News}}**, **{{Tag}}** и **{{Comment}}**,
  которые логически связаны отношениями (см. предыдущие задачи)
    - один-ко-многим (**{{Author}}** и **{{News}}**, **{{News}}** и **{{Comment}}**)
    - многие-ко-многим (**{{News}}**, **{{Tag}}**).
- В **Kafka** настроена передача между модулями **publisher** и **discussion** сущности **{{Comment}}**.
- **{{Author}}(s)**, **{{News}}(s)**, **{{Tag}}(s)** хранятся в **Postgres**.
- **{{Comment}}(s)** хранятся в **Cassandra**.

### Задание

Необходимо в ранее разработанном распределенном приложении реализовать
механизм кеширования в **Redis**.

Основой для выполнения задания является следующая диаграмма взаимодействия

![sequence-diagram](media/350.svg)

### Технические требования

- Используйте префикс **/api/v1.0/** для контроллеров REST и их методов,
- Используйте адрес и порт **localhost:24110** для самого приложения (это модуль **publisher**).
- Не отключайте REST **localhost:24130** для модуля **discussion**.
- Используйте обязательный префикс **tbl_** для таблиц(ы) в базе(ах) данных
- Используйте подключение по умолчанию к **Redis** из [hub.docker.com](https://hub.docker.com/_/redis)

### Рекомендации

#### Изучение технологий

1. Изучить основы работы с Redis и его возможности.
2. Понять принципы кеширования данных и как Redis может быть использован в качестве кеша.
3. Изучить основные принципы горизонтального масштабирования и как Redis помогает в этом.

#### Настройка и установка Redis

1. Скачать и установить Redis на локальную машину или использовать облачный сервис.
2. Настроить конфигурацию Redis в соответствии с требованиями проекта.
3. Проверить доступность Redis и убедиться, что он работает корректно.

#### Интеграция Redis с модулем **publisher**

1. Добавить зависимость для поддержки Redis в проекте.
2. Настроить подключение к Redis из модуля **publisher**.
3. Разработать логику кеширования данных в Redis для запросов, требующих повторного использования.
4. Разработать логику обновления данных в Redis и в соответствующих хранилищах для запросов.

#### Тестирование и оптимизация

1. Написать unit-тесты для проверки корректности работы кеша на основе Redis.
2. Провести нагрузочное тестирование для оценки улучшения быстродействия модуля REST.
3. Оптимизировать работу с Redis для уменьшения времени доступа к данным.

### Дополнительные шаги (по желанию)

1. Реализовать логику для запуска дополнительных экземпляров **publisher**
2. Проверить, что наличие общего кеша позволяет реализовать горизонтальное масштабирование модуля **publisher**

